import copy

from tree_automata import TTreeAut


# NOTE: Is it possible to create a union such that the result will always have
# exactly one rootstate -- the result won't be guaranteed to be deterministic?
def tree_aut_union(ta1: TTreeAut, ta2: TTreeAut) -> TTreeAut:
    """
    Creates a tree automaton, that generates trees which can be generated by
    at least one of its two input automatons.

    Essentially, just merging transition dictionaries and set of rootstates.
    But before merging, name resolution is needed for states with the same name.
    """
    result: TTreeAut = copy.deepcopy(ta2)
    result.name = f"union({ta1.name},{ta2.name})"

    # remove name collisions by renaming states in a new automaton
    for state_name in ta1.transitions:
        if state_name in result.transitions:
            result.rename_state(state_name, str(state_name) + "_new")

    # merge the two automata
    result.transitions = {**result.transitions, **ta1.transitions}
    result.roots = result.roots + ta1.roots
    result.port_arity = result.get_port_arity()
    return result
