import copy

from tree_automata import TTreeAut


# Creates a tree automaton, that generates trees which can be generated by
#  at least one of its two input automatons.
#
#  just merging transition dictionaries and set of rootstates
#  before merging, name resolution is needed for states with the same name
def tree_aut_union(ta1: TTreeAut, ta2: TTreeAut) -> TTreeAut:
    result = copy.deepcopy(ta2)
    result.name = f"union({ta1.name},{ta2.name})"

    # remove name collisions by renaming states in a new automaton
    for state_name in ta1.transitions:
        if state_name in result.transitions:
            result.rename_state(state_name, str(state_name) + "_new")

    # merge the two automata
    result.transitions = {**result.transitions, **ta1.transitions}
    result.roots = result.roots + ta1.roots
    result.port_arity = result.get_port_arity()
    return result
