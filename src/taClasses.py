# taClasses.py
# Basic classes needed for implementing tree automata
# Implementation of tree automata for article about automata-based BDDs
# Author: Jany26  (Jan Matufka)  <xmatuf00@stud.fit.vutbr.cz>

import copy

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# CLASSES FOR TREE AND TREE AUTOMATON
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

## tree node implementation - items generated by tree automata
# tree is made of nodes, root node can be recognized with parent node set to 'None'
# other nodes have a parent, when connected using addChild() and connectChild() methods
class TTreeNode:
    def __init__(self, value):
        self.value = value
        self.parent = None # if None = the node is a root
        self.children = []
        self.depth = 0

    def addChild(self, value):
        childPtr = TTreeNode(value)
        childPtr.depth = self.depth + 1
        childPtr.parent = self
        self.children.append(childPtr)
    
    def connectChild(self, node): 
        self.children.append(node)
        node.parent = self
        node.depth = self.depth + 1
    
    def removeChild(self, value): # removes 1 child (starts from smallest index (left)) with specified value
        for i in range(len(self.children)):
            if self.children[i].value == value:
                self.children.pop(i)
                return
    
    # needed for testing
    def printNode(self):
        print(2 * self.depth * ' ' + str(self.value) + "   --> lv " + str(self.depth))
        for i in self.children:
            i.printNode()
    
    ### Maybe redundant functions ###

    def findFromLeft(self, valueToFind):
        for i in self.children:
            x = i.findFromLeft(valueToFind)
            if x != None:
                return x
        return self if (self.value == valueToFind) else None

    def findFromRight(self, valueToFind):
        tempList = self.children[::-1]
        for i in tempList:
            x = i.findFromRight(valueToFind)
            if x != None:
                return x
        return self if (self.value == valueToFind) else None

## Tree automaton class - has two attributes = dictionary of states and root state array
    # transitions = dictionary (A) of dictionaries (B) referenced by state name
    # inner dictionaries (B) are then referenced by transition names (arbitrary)
    # the transition itself is then just a tuple of:
    #     - input state, 
    #     - transition label (edge name/type) 
    #     - array of output states (size of array = arity of the node)
    # * all state and label names are considered as strings

    # In documentation, the naming convention will be:
    # - TTreeAut consists of: array of root states and "state" dictionary 
    # - state dictionaries are referenced by names of the states
    # - each state in the state dictionary references another dictionary
    #     - this will be called "transition" dictionary (for the current state)
        # - the transition dictionary is referenced by arbitrary keys (for now)

class TTreeAut:
    def __init__(self, rootStates, transitions):
        self.rootStates = rootStates
        self.transitions = transitions

    def printTreeAut(self):
        print("=== Root States ===")
        print(str(self.rootStates))

        for stateName, content in self.transitions.items():
            print("=== State " + stateName + " ===")
            # needs polishing
            for key, transition in content.items():
                print(transition[0] + " -- " + transition[1] + " --> " + str(transition[2]))
        print("")
    
    ### Informative functions ###

    def getStates(self) -> list:
        result = []
        for stateName in self.rootStates:
            result.append(stateName)
        for stateName in self.transitions:
            result.append(stateName)
        return set(result)

    # needed for feeding makePrefix() function
    # generates all edge symbols labeling the output edges from the tree automaton
    def getOutputEdges(self) -> list:
        outputEdgeList = []
        for stateName, content in self.transitions.items():
            for key, transition in content.items():
                if len(transition[2]) == 0:
                    outputEdgeList.append(transition[1])
        return outputEdgeList

    # needed for bottom-up reachability -> used in useless state removal
    def getOutputStates(self) -> list:
        outputStateList = []
        for stateName, content in self.transitions.items():
            for key, transition in content.items():
                if len(transition[2]) == 0:
                    outputStateList.append(stateName)
                    break
        return outputStateList
    
    def getSymbolArityDict(self) -> dict:
        symbolDict = {}
        for state, content in self.transitions.items():
            for key, transition in content.items():
                if transition[1] not in symbolDict:
                    symbolDict[transition[1]] = len(transition[2])
        return symbolDict
    
    ### Modifying functions ###
    
    # needed for union (and testing) - name collision resolving
    def renameState(self, oldName:str, newName:str):
        if oldName in self.rootStates:
            self.rootStates.remove(oldName)
            self.rootStates.append(newName)
        
        if oldName not in self.transitions:
            return
        # supposing only one state with the oldName exists in treeAut
        # renaming state in the dictionary of states and rootStates array (1st layer)
        self.transitions[newName] = self.transitions.pop(oldName)

        # renaming name of the state inside transitions (2nd layer)
        for stateName, content in self.transitions.items():
            for key, transition in content.items():
                if transition[0] == oldName:
                    transition[0] = str(newName)
                # renaming state name inside the children array (3rd layer)
                for i in range(len(transition[2])):
                    if transition[2][i] == oldName:
                        transition[2][i] = newName

    def removeState(self, state:str):
        if state in self.rootStates:
            self.rootStates.remove(state)
        
        if state not in self.transitions:
            return
        
        self.transitions.pop(state)

        resultDict = {}
        for stateName, content in self.transitions.items():
            tempDict = {}
            for key, transition in content.items():
                if state not in transition[2]:
                    tempDict[key] = transition
            resultDict[stateName] = tempDict
        self.transitions = resultDict      

    ### Building functions ###

    def createPrefix(self, additionalOutputEdges): 
        result = copy.deepcopy(self)
        for stateName, content in result.transitions.items():
            tempDict = {}
            for symbol in additionalOutputEdges:
                tempString = str(stateName) + "-" + str(symbol) + "-()"
                tempDict[tempString] = [stateName, symbol, []]
            for tempName, tempTransition in tempDict.items():
                # checking for non-port output edge
                nonPortOutput = False
                for name, transition in content.items():
                    if not transition[1].startswith('Port') and len(transition[2]) == 0:
                        nonPortOutput = True
                # skip adding non-port output edge if another non-port output present
                if not tempTransition[1].startswith('Port') and nonPortOutput:
                    continue
                else:
                    content[tempName] = tempTransition
        return result

    def createSuffix(self):
        result = copy.deepcopy(self)
        for stateName, content in result.transitions.items():
            check = True
            for key, transition in content.items():
                if (transition[1].startswith("Port")):
                    check = False
                    break
            if check and stateName not in result.rootStates:
                result.rootStates.append(stateName)
        return result

