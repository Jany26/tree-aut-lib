from tree_automata.functions.determinization import tree_aut_determinization
from tree_automata import TTreeAut


# creates a tree automaton that can only generate trees,
#  that can not be generated by the input TA
#  - uses determinization and completion of the TA beforehand
def tree_aut_complement(ta: TTreeAut, alphabet: dict, verbose=False) -> TTreeAut:
    result = tree_aut_determinization(ta, alphabet, verbose)
    roots = [i for i in result.get_states() if i not in result.roots]
    result.roots = roots
    result.name = f"complement({ta.name})"
    return result
