"""
[file] complement.py
[author] Jany26  (Jan Matufka)  <xmatuf00@stud.fit.vutbr.cz>
[description] Complement of a tree automaton.
"""

from tree_automata.functions.determinization import tree_aut_determinization
from tree_automata import TTreeAut


def tree_aut_complement(ta: TTreeAut, alphabet: dict[str, int], verbose=False) -> TTreeAut:
    """
    Create a tree automaton that can only generate trees (with regards to some "complete" alphabet),
    that can not be generated by the input TA.
    Uses determinization and completion of the TA beforehand (worst case exponential time).
    """
    result: TTreeAut = tree_aut_determinization(ta, alphabet, verbose)
    roots: list[str] = [i for i in result.get_states() if i not in result.roots]
    result.roots = roots
    result.name = f"complement({ta.name})"
    return result


# End of file complement.py
